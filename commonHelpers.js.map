{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/* const API key = 43954842-86e0551d49d52b31999082e7b; */\nimport axios from 'axios';\n\nexport default class PixabayApi {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n    this.PER_PAGE = 15;\n  }\n\n  //Метод класу який здійснює асинхронний запит до API Pixabay для отримання фотографій\n  async fetchPhoto() {\n    console.log(this);\n\n    //Фурмуємо параметри запиту\n    const axiosOp = {\n      method: 'get',\n      url: 'https://pixabay.com/api/',\n      params: {\n        key: '43954842-86e0551d49d52b31999082e7b',\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: 'true',\n        q: this.searchQuery,\n        page: this.page,\n        per_page: this.PER_PAGE,\n      },\n    };\n    try {\n      const response = await axios(axiosOp); //Виконується запит до API за допомогою axios(axiosOp)\n      const data = response.data; // Отримуємо дані з відповіді\n      this.incrementPage();\n      return data;\n    } catch (error) {\n      throw new Error('Error fetching data from Pixabay API:', error); //Якщо під час виконання запиту виникає помилка, вона ловиться і кидається нова помилка з повідомленням про проблему.\n    }\n  }\n\n  // Метод класу збільшує сторінку на 1\n  incrementPage() {\n    this.page += 1;\n  }\n\n  //Метод класу що скидає сторінку до 1\n  resetPage() {\n    this.page = 1;\n  }\n\n  //Метод класу Геттер query дозволяє отримати значення властивості searchQuery\n  get query() {\n    return this.searchQuery;\n  }\n\n  //Метод класу Сетер query який дозволяє перезаписати значення властивості searchQuery\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n\n  //Метод класу який очищає вміст властивості searchQuery\n  reset() {\n    this.searchQuery = '';\n  }\n}\n","// Імпортуємо SimpleLightbox\nimport SimpleLightbox from 'simplelightbox';\n// Додатковий імпорт стилів\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\n//Створюємо новий екземпляр бібліотеки\nlet lightbox = new SimpleLightbox('.gallery a', {\n  captions: true,\n  captionsData: 'alt',\n  captionDelay: 250,\n});\n\n//Створюємо фннкцію для розмітки карток галереї\nexport function onRenderGallery(elements, galleryContainer) {\n  if (!galleryContainer) {\n    console.error('Gallery container is undefined'); // Перевіряємо чи обєкт передано, якщо ні, то виводиться помилка\n    return;\n  }\n\n  //Формуємо розмітку для елементів галереї\n  const markup = elements\n    .map(\n      //використовуємо метод map для перетворення кожного елементу з масиву elements у HTML-розмітку\n      ({\n        webformatURL,\n        largeImageURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<div class=\"photo-card\">\n    <a href=\"${largeImageURL}\">\n      <img class=\"photo-img\" src=\"${webformatURL}\" alt=\"${tags}\" />\n    </a>\n    <ul class=\"info-list\">\n      <li class=\"info-item\">\n        <b>Likes</b>\n        ${likes}\n      </li>\n      <li class=\"info-item\">\n        <b>Views</b>\n        ${views}\n      </li>\n      <li class=\"info-item\">\n        <b>Comments</b>\n        ${comments}\n      </li>\n      <li class=\"info-item\">\n        <b>Downloads</b>\n        ${downloads}\n      </li>\n    </ul>\n    </div>`;\n      }\n    )\n    .join(''); // Метод join з'єднує всі отримані рядки в один великий рядок HTML.\n  galleryContainer.insertAdjacentHTML('beforeend', markup); //Додаємо розмітку в кінець контейнера галереї, використовуючи метод insertAdjacentHTML.\n  lightbox.refresh(); //Оновлюємо галерею\n  console.log(galleryContainer);\n}\n","import './css/styles.css';\nimport PixabayApi from './js/pixabay-api';\nimport { onRenderGallery } from './js/render-functions';\nimport iziToast from 'izitoast';\n// Додатковий імпорт стилів\nimport 'izitoast/dist/css/iziToast.min.css';\n\n//Оголошуємо refs, та отримуємо доступ до елементів\nconst refs = {\n  searchform: document.querySelector('.search-form'),\n  galleryConteiner: document.querySelector('.gallery'),\n  loader: document.querySelector('.loader'),\n  loadMoreBtn: document.querySelector('.load-more'),\n};\n\n//Створюємо змінну для відображення загальної кількості завантажених фотографій, для початку присвоюємо їй значення 0\nlet totalHits = 0;\n//Створюємо новий екземпляр класу\nconst pixabayApi = new PixabayApi();\n\n//Встановлюємо прослуховувач події на форму та кнопку\nrefs.searchform.addEventListener('submit', onSearch);\nrefs.loadMoreBtn.addEventListener('click', onLoadMore);\n\n//Створюємо функцію яка виконує пошук зображень на основі введеного запиту\nfunction onSearch(event) {\n  event.preventDefault(); // щоб не відбувалось перезавантаження сторінка після відправлення форми\n\n  //Отримання та обробка запиту і очищення його від пробілів\n  const query = event.currentTarget.elements.query.value.trim();\n  if (!query) {\n    return showToast('red', 'Please, fill the main field', 'topRight'); //Якщо запит порожній зявляється повідомлення про необхідність заповнити поле, і функція завершується.\n  }\n\n  //Викликаємо функцію для показу індикатора завантаження\n  showLoader();\n  refs.galleryConteiner.innerHTML = ''; //Очищується контейнер галереї\n  pixabayApi.query = query; // задається новий пошуковий запит\n  pixabayApi.resetPage(); //викликаємо метод класу до скидає сторінку до 1\n\n  totalHits = 0;\n  refs.searchform.reset(); // Очищуємо поле вводу\n  onDownloadPhoto(); //Викликаємо асинхронну функцію для завантаженя фото з API Pixabay\n}\n\n//Функція для завантаження додаткових зображень з API Pixabay, коли натискається кнопка \"Load More\"\nfunction onLoadMore() {\n  showLoader();\n  pixabayApi.incrementPage(); //// Збільшуємо номер сторінки на 1\n  onDownloadPhoto(); // Викликаємо функцію для завантаження нових зображень\n}\n\n//Створюємо асинхронну функцію для завантаження фотографій з API Pixabay, обробки результатів та оновлення інтерфейсу користувача відповідно до отриманих даних.\nasync function onDownloadPhoto() {\n  showLoader();\n  refs.loadMoreBtn.classList.add('is-hidden');\n\n  try {\n    const result = await pixabayApi.fetchPhoto(); //Виконується асинхронний запит до API Pixabay для отримання фотографій.\n    const { hits, total } = result; //Отримані результати розбиваються на hits (масив фотографій) та total (загальна кількість знайдених фотографій).\n    totalHits += hits.length; //totalHits оновлюється для відстеження загальної кількості завантажених фотографій.\n\n    //Якщо фотографії не знайдені, показується повідомлення про відсутність результатів\n    if (!hits.length) {\n      showToast(\n        'red',\n        'Sorry, there are no images matching your search query. Please try again.',\n        'topRight'\n      );\n      refs.loadMoreBtn.classList.add('is-hidden'); //Додаємо клас is-hidden до кнопки \"Load More\" щоб зробити її невидимою\n      return;\n    }\n\n    onRenderGallery(hits, refs.galleryConteiner); //Викликаємо функцію яка здійснює відображення отриманих фотографій у галереї.\n\n    //Якщо загальна кількість завантажених фотографій менша за загальну кількість знайдених, появляється повідомлення про успішний пошук, і кнопка \"Завантажити більше\" знову стає видимою.\n    if (totalHits < total) {\n      showToast('green', `Hooray! We found ${total} images !!!`, 'topRight');\n      refs.loadMoreBtn.classList.remove('is-hidden'); //Видаємо клас is-hidden для кнопки Load More щоб зробити її видимою\n    }\n\n    //Якщо завантажено всі знайдені фотографії, показується повідомлення про досягнення кінця результатів.\n    if (totalHits >= total) {\n      showToast(\n        'red',\n        \"We're sorry, but you've reached the end of search results.\",\n        'topRight'\n      );\n    }\n    scrollPage(); //Викликаємо функцію для плавної прокрутки сторінки\n  } catch (error) {\n    console.error('Error:', error);\n    showToast(\n      'red',\n      'An error occurred while fetching images. Please try again later.',\n      'topRight'\n    );\n  } finally {\n    hideLoader();\n    /*  refs.searchform.reset(); // Очищуємо поле вводу */\n  }\n}\n\n// Функція для плавного прокручування сторінки на дві висоти картки галереї\nfunction scrollPage() {\n  const { height: cardHeight } = document\n    .querySelector('.gallery .photo-card')\n    .getBoundingClientRect();\n\n  window.scrollBy({\n    top: cardHeight * 2,\n    behavior: 'smooth',\n  });\n}\n\n// Функція для виведення повідомлення\nfunction showToast(color, message) {\n  iziToast.show({\n    color: color,\n    message: message,\n    position: 'topRight',\n  });\n}\n// Функція для  показу індикатора завантаження Loader\nfunction showLoader() {\n  refs.loader.style.display = 'block';\n}\n\n// Функція для приховування індикатора завантаження Loader\nfunction hideLoader() {\n  refs.loader.style.display = 'none';\n}\n"],"names":["PixabayApi","axiosOp","data","axios","error","newQuery","lightbox","SimpleLightbox","onRenderGallery","elements","galleryContainer","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","refs","totalHits","pixabayApi","onSearch","onLoadMore","event","query","showToast","showLoader","onDownloadPhoto","result","hits","total","scrollPage","hideLoader","cardHeight","color","message","iziToast"],"mappings":"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"}